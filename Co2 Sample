  GNU nano 7.2                      /home/atlasco2/Raspberry-Pi-sample-code/uart.py
    """
    Send command to the Atlas Sensor.
    Before sending, add Carriage Return at the end of the command.
    """
    buf = cmd + "\r"  # Add carriage return
    try:
        ser.write(buf.encode('utf-8'))
        return True
    except SerialException as e:
        print("Error, ", e)
        return None

def update_display():
    """
    Function to read data from the sensor and update the GUI.
    """
    send_cmd("R")  # Send read command
    print("DEBUG: Sent command 'R' to sensor.")  # Log command sent
    time.sleep(1)  # Wait for sensor response
    lines = read_lines()
    if lines:
        try:
            # Extract the CO2 value (first element of the response)
            raw_value = lines[0].decode('utf-8').strip()  # Decode and clean up
            print(f"DEBUG: Raw response from sensor: {raw_value}")  # Log raw data
            label.config(text=f"CO2: {raw_value}")  # Update GUI
        except Exception as e:
            print(f"DEBUG: Error parsing response: {e}")
            label.config(text="Error parsing response")
    else:
        print("DEBUG: No data received from sensor.")  # Log no data
        label.config(text="No CO2 Data")  # Show message on GUI
    root.after(2000, update_display)  # Repeat every 2 seconds


if __name__ == "__main__":
    print("\nWelcome to the CO2 Sensor Display Script.\n")

    usbport = '/dev/ttyAMA5'  # Adjust to match your setup

    print("Opening serial port now...")

    try:
        ser = serial.Serial(usbport, 9600, timeout=1)
    except serial.SerialException as e:
        print("Error, ", e)
        sys.exit(0)

    # Initialize the GUI
    root = Tk()
    root.title("CO2 Sensor Readout")
    root.geometry("400x200")  # Adjust the size as needed
    label = Label(root, text="CO2: --", font=("Tahoma", 130), fg="blue")
    label.pack(expand=True)

    # Start updating the display
    update_display()

    # Start the Tkinter main loop
    root.mainloop()





