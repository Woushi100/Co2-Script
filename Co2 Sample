#!/usr/bin/python

import serial
import sys
import time
from serial import SerialException
from tkinter import Tk, Label

def read_line():
    """
    Taken from the ftdi library and modified to
    use the EZO line separator "\r"
    """
    lsl = len(b'\r')
    line_buffer = []
    while True:
        next_char = ser.read(1)
        if next_char == b'':
            break
        line_buffer.append(next_char)
        if (len(line_buffer) >= lsl and
                line_buffer[-lsl:] == [b'\r']):
            break
    return b''.join(line_buffer)

def read_lines():
    """
    Also taken from ftdi lib to work with the modified readline function
    """
    lines = []
    try:
        while True:
            line = read_line()
            if not line:
                break
                ser.flush_input()
            lines.append(line)
        return lines

    except SerialException as e:
        print("Error, ", e)
        return None

def send_cmd(cmd):
    """
    Send command to the Atlas Sensor.
    Before sending, add Carriage Return at the end of the command.
    """
    buf = cmd + "\r"  # Add carriage return
    try:
        ser.write(buf.encode('utf-8'))
        return True
    except SerialException as e:
        print("Error, ", e)
        return None

def update_display():
    """
    Function to read data from the sensor and update the GUI.
    """
    send_cmd("R")  # Send read command
    print("DEBUG: Sent command 'R' to sensor.")  # Log command sent
    time.sleep(1)  # Wait for sensor response
    lines = read_lines()
    if lines:
        try:
            # Extract the CO2 value (first element of the response)
            raw_value = lines[0].decode('utf-8').strip()  # Decode and clean up
            print(f"DEBUG: Raw response from sensor: {raw_value}")  # Log raw data
            label.config(text=f"CO2 Level: {raw_value}")  # Update GUI
        except Exception as e:
            print(f"DEBUG: Error parsing response: {e}")
            label.config(text="Error parsing response")
    else:
        print("DEBUG: No data received from sensor.")  # Log no data
        label.config(text="No CO2 Data")  # Show message on GUI
